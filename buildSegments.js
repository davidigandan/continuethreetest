import * as THREE from 'three';
import  makeSegment  from './makeSegment'

// returns an array of meshes correctly positioned
/*
- bottomAngle is initialised as 0. Outside the for loop.
- loop through dataset elemets
- get our angle from pointA of segment1
- get length of segment1 with Math.hypot
- get next segments angle
- work out turning angle and therefore work out cutting angle for curr and subsequent bottom angle
-


*/
export default function buildSegments(lineWidth=5, lineColor="green", dataset=[(0,1), (1,2), (2,3), (3,4)]) {
    const meshesOfLine=[]
    const material = new THREE.MeshBasicMaterial( { color: lineColor } )
    
    let startBottomAngle = 0
    let endTopAngle = 0

    // Loop helper variables (from last loop)
    let segmentAngleHelper;
    let bottomCutHelper;
    
    
    for (let i=0; i<dataset.length-1; i++) { //don't compose a segment on last datapoint
            
    // ------------------------------------------------------------------------------------------------------------------------------------------------
        //CURRENT SEGMENT CALCULATIONS
        // change between points dp[current] and dp[current+1]
        const deltaXTo1 = dataset[i][0] - dataset[i+1][0]
        const deltaYTo1 = dataset[i][1] - dataset[i+1][1]

        // calculate length to next datapoint(currentSegmentLength)
        let currentSegmentLength;
        currentSegmentLength = Math.hypot(deltaXTo1, deltaYTo1);

        // calculate angle of current segment
        const currentSegmentAngle =  Math.asin(deltaXTo1/currentSegmentLength)


        //NEXT SEGMENT CALCULATIONS
        // change between points dp[curr+1] and dp[curr+2]
        const deltaX1To2 = dataset[i+1][0] - dataset[i+2][0]
        const deltaY1To2 = dataset[i+1][1] - dataset[i+2][1]

        // calculate nextSegmentAngle
        const nextSegmentAngle = Math.PI - Math.atan(deltaX1To2/deltaY1To2);
        
    // ------------------------------------------------------------------------------------------------------------------------------------------------
        
        // calculate topAngle
        const relativeAngle = nextSegmentAngle - currentSegmentAngle

        let topCutAngle;
        if (i=dataset.length-2){ // at the end of the last segment, generated by the second to the last datapoint, cut angle is 0
            topCutAngle = endTopAngle;
        } else {
            topCutAngle = relativeAngle/2
            bottomCutHelper = topCutAngle
        }

        // calculate bottomAngle
        let bottomCutAngle;
        if (i=0) { //at the start of the first segment
            bottomCutAngle = startBottomAngle;
        } else {
            bottomCutAngle = topCutHelper
        }

        // call makeSegment
        meshesOfLine.push(makeSegment(currentSegmentLength,lineWidth,-topCutAngle,-bottomCutAngle,material))

    }
}